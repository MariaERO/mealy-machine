// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2023 12:13:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MealyMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MealyMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg down;
reg RES;
reg up;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
MealyMachine i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.CLK(CLK),
	.d(d),
	.down(down),
	.e(e),
	.f(f),
	.g(g),
	.RES(RES),
	.up(up)
);
initial 
begin 
#300000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #5000 1'b0;
	# 5000;
	repeat(28)
	begin
		CLK = 1'b1;
		CLK = #5000 1'b0;
		# 5000;
	end
	CLK = 1'b1;
	CLK = #5000 1'b0;
end 

// up
initial
begin
	up = 1'b1;
end 

// down
initial
begin
	down = 1'b0;
end 

// RES
initial
begin
	RES = 1'b0;
end 
endmodule

